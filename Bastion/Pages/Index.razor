@page "/"

@using Microsoft.AspNetCore.Components.Forms
@using Bastion.Core.Domain.UserInputSecret;
@using Bastion.Core.Domain.UserInputSecret.Dto;
@using Bastion.Core.Domain.UserInputSecret.Pipelines;
@using Bastion.Core.Domain.Encryption;
@using Bastion.Core.Domain.Encryption.Pipelines;
@using Bastion.Core.Domain.Decryption;
@using Bastion.Core.Domain.Decryption.Pipelines;
@using Bastion.Models;
@using Microsoft.Identity.Web.UI;
@using Microsoft.Identity.Web
@using Microsoft.Graph
@using System.Security.Claims;
@using BootstrapBlazor.Components;
@using System.Diagnostics.CodeAnalysis;
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject Microsoft.Identity.Web.ITokenAcquisition TokenAcquisitionService
@inject CopyToClipboardManager ClipBoardManager

<PageTitle>Bastion</PageTitle>

<AuthorizeView>
    <Authorized Context="Auth">
        <h1>Encrypt a secret and share it with a person of your choice</h1>
        @if (userInfo == null || users == null)
        {
            <div>Loading..</div>
        }
        else
        {
            <EditForm Model="@userInputModel" OnSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <label>
                        <InputTextArea id="plaintext" @bind-Value="authUserInputModel.SecretPlaintext" />
                    </label>
                </div>
                <br /> <br />
                Receivers:
                <div class="container">
                        <div class="receivers">
                            <MultiSelect Items="@Items" @bind-Value="@authUserInputModel.OIDReceiver" />
                        </div>
                        <div>
                            <Button Icon="fa-regular fa-trash-can" Text="Clear" OnClick="@ClearItems" />
                        </div>
                </div>
                <div>
                    <br />
                    <label>
                        Lifetime: <br />
                        <InputRadioGroup Name="radioGroup" @bind-Value="userInputModel.Lifetime">
                            <InputRadio Value="1" /> 1 hour
                            <InputRadio Value="8" /> 8 hours
                            <InputRadio Value="24" /> 24 hours
                        </InputRadioGroup>

                    </label>
                    <br /><br />
                    <button class="btn btn-primary" type="submit">Encrypt</button>
                </div>
            </EditForm>

            <br />

            <h1>Share the encrypted secret</h1>
            <div>
                <Button Icon="fa-regular fa-clipboard" Text="Copy one-click link" OnClick="@CopyToClipboard" />

                <br /> <br />
                @if (id != Guid.Empty)
                {
                    <div>@url</div>
                }
                else
                {
                    <div>@message</div>
                }

                @if (!DisplayAlert)
                {
                    <div class="alert alert-danger fade-in alerts" role="alert">
                        Error storing secret
                    </div>
                }
            </div>
        }
    </Authorized>
    <NotAuthorized Context="Auth">
        <h1>Encrypt a secret</h1>

        <EditForm Model="@userInputModel" OnSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label>
                <InputTextArea id="plaintext" @bind-Value="userInputModel.SecretPlaintext"/>
            </label>
            <br/> <br/>
            <div>
            <label>
                Lifetime: <br />
                <InputRadioGroup Name="radioGroup" @bind-Value="userInputModel.Lifetime">
                    <InputRadio Value="1"/> 1 hour 
                    <InputRadio Value="8"/> 8 hours 
                    <InputRadio Value="24"/> 24 hours
                </InputRadioGroup>
            </label>
            <br/><br/>
            <Button class="btn btn-primary" type="submit">Encrypt</Button>
            </div>
        </EditForm>

        <br/>

        <h1>Share the encrypted secret</h1>
        <div>
            <Button Icon="fa-regular fa-clipboard" Text="Copy one-click link" OnClick="@CopyToClipboard" />

            <br/> <br/>
            @if (id != Guid.Empty)
            {
                <div>@url</div>
            }
            else 
            {
                <div>@message</div>
            }

            @if (!DisplayAlert)
            {
                <div class="alert alert-danger fade-in alerts" role="alert">
                    Error storing secret
                </div>
            }

        </div> 
    </NotAuthorized>
</AuthorizeView>


@code {
    [Inject]
    private IConfiguration Configuration { get; set; }

    private UserInputModel userInputModel = new();
    private AuthUserInputModel authUserInputModel = new();
    private Guid id = default;
    private string url = "";
    string message = "";

    bool authenticated;

    IGraphServiceUsersCollectionPage? users;
    User? userInfo;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    [Parameter]
    public bool DisplayAlert { get; set; } = true;

    [NotNull]
    private List<SelectedItem>? Items { get; set; }

    [NotNull]
    private List<SelectedItem>? DataSource { get; set; }

    private string[] SelectedArrayValues { get; set; } = Array.Empty<string>(); // for testing

    private List<SelectedItem>? SearchItemsSource { get; set; } // for search if it is implemented

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;
        authenticated = user.Identity?.IsAuthenticated ?? false;

        if (authenticated)
        {
            try
            {
                // Check claims tenant and issuer
                // Tenant should be the directory tenant ID of the app registration of Bastion
                // Issuer should be Microsoft and tenant ID
                string issuer = "";
                claims = user.Claims;
                //var test = claims.First(c => c.Type == "Issuer");
                foreach (Claim claim in claims)
                {
                    issuer = claim.Issuer;
                    break;
                }
                string? tenantId = user.GetTenantId();

                string TenantId = Configuration["TenantId"];
                string Issuer = Configuration["Issuer"];

                if (tenantId != TenantId || issuer != Issuer)
                {
                    throw new Exception("Invalid tenantId or issuer.");
                }

                // Get list of all users, and logged in user
                users = await GraphServiceClient.Users.Request().GetAsync(); //use this list to populate, equivalent to Items
                userInfo = await GraphServiceClient.Me.Request().GetAsync();

                DataSource = new List<SelectedItem>();
                // Get list from userInfo
                foreach (var item in users)
                {
                    SelectedItem option = new SelectedItem(item.Id, item.DisplayName);
                    DataSource.Add(option);
                }

                Items = GenerateDataSource(DataSource);
            }
            catch (Exception ex)
            {
                ConsentHandler.HandleException(ex);
            }
        }
    }

    private static List<SelectedItem> GenerateDataSource(List<SelectedItem> source) => source.Select(i => new SelectedItem(i.Value, i.Text)).ToList();

    private void ClearItems()
    {
        authUserInputModel.OIDReceiver = Array.Empty<string>();
        //SelectedArrayValues = Array.Empty<string>();
    }

    private async void HandleValidSubmit()
    {
        message = "Encrypting secret...";

        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;
        authenticated = user.Identity?.IsAuthenticated ?? false;

        if (authenticated)
        {
            if (userInfo == null)
            {
                throw new Exception("user cannot be null.");
            }
            string OIDSender = userInfo.Id;

            // Create user input
            var responseInput = await mediator.Send(new CreateUserInput.Request(authUserInputModel.SecretPlaintext, authUserInputModel.Lifetime, OIDSender, authUserInputModel.OIDReceiver));

            if (responseInput.success)
            {
                // Create UserInputDto
                UserInput userInput = responseInput.userInput;
                UserInputDto userInputDto = new UserInputDto(userInput.Id, userInput.TimeStamp, userInput.Plaintext, userInput.Lifetime, userInput.OIDSender, userInput.OIDReceiver);

                // Encrypt and store data
                var response = await mediator.Send(new EncryptAndSaveSecret.Request(userInputDto));

                if (response.success)
                {
                    id = userInput.Id;
                    url = $"https://bastion-bouvet.azurewebsites.net/{id.ToString()}";
                    StateHasChanged();
                }
                else
                {
                    message = "";
                    url = "";
                    DisplayAlert = false;
                    StateHasChanged();
                }
            }
            else
            {
                message = "";
                url = "";
                DisplayAlert = false;
                StateHasChanged();
            }
        }
        else
        {
            var responseInput = await mediator.Send(new CreateUserInput.Request(userInputModel.SecretPlaintext, userInputModel.Lifetime));

            if (responseInput.success) // TODO: Rewrite as helper method?
            {
                // Create UserInputDto
                UserInput userInput = responseInput.userInput;
                UserInputDto userInputDto = new UserInputDto(userInput.Id, userInput.TimeStamp, userInput.Plaintext, userInput.Lifetime);

                // Encrypt and store data
                var response = await mediator.Send(new EncryptAndSaveSecret.Request(userInputDto));
                if (response.success)
                {
                    id = userInput.Id;
                    url = $"https://bastion-bouvet.azurewebsites.net/{id.ToString()}";
                    StateHasChanged();
                }
                else
                {
                    message = "";
                    url = "";
                    DisplayAlert = false;
                    StateHasChanged();
                }
            }
            else
            {
                message = "";
                url = "";
                DisplayAlert = false;
                StateHasChanged();
            }
        }
    }

    async Task CopyToClipboard()
    {
        try
        {
            await ClipBoardManager.WriteTextAsync($"{url}");
        }
        catch
        {
            System.Console.WriteLine("Cannot copy text to clipboard");
        }
    }
}