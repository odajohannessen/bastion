@page "/"

@using Microsoft.AspNetCore.Components.Forms
@using Bastion.Core.Domain.UserInputSecret;
@using Bastion.Core.Domain.UserInputSecret.Dto;
@using Bastion.Core.Domain.UserInputSecret.Pipelines;
@using Bastion.Core.Domain.Encryption;
@using Bastion.Core.Domain.Encryption.Pipelines;
@using Bastion.Core.Domain.Decryption;
@using Bastion.Core.Domain.Decryption.Pipelines;
@using Bastion.Models;

<PageTitle>Bastion</PageTitle>

<h1>Encrypt your secret using AES</h1>

<EditForm Model="@userInputModel" OnSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>
        Secret message: 
        <br/>
        <InputTextArea style="width: 300%" rows="15" id="plaintext" @bind-Value="userInputModel.SecretPlaintext" />

    </label>
    <br/> <br/>
    <label>
        Lifetime (hours):
        <InputNumber id="lifetime" @bind-Value="userInputModel.Lifetime" />
    </label>
    <br/><br/>
    <button type="submit">Encrypt message</button>
</EditForm>

<br/>

<h1>Url id</h1>
<div>@id</div>

@*<SurveyPrompt Title="How is Blazor working for you?" /> *@

@code {
    private UserInputModel userInputModel = new();
    private Guid id = default;

    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleSubmit called");

        // Create user input
        var responseInput = await mediator.Send(new CreateUserInput.Request(userInputModel.SecretPlaintext, userInputModel.Lifetime));

        if (responseInput.success)
        {
            Logger.LogInformation("UserInput created");

            // Create UserInputDto
            UserInput userInput = responseInput.userInput;
            id = userInput.Id;
            // TODO: Add if statement for showing url id, don't show when default value
            UserInputDto userInputDto = new UserInputDto(userInput.Id, userInput.TimeStamp, userInput.Plaintext, userInput.Lifetime);

            // Encrypt and store data 
            var response = mediator.Send(new EncryptAndSaveSecret.Request(userInputDto));

            // TODO: In other page, Decrypt and display
            //var responseDecrypt = await mediator.Send(new DecryptAndDeleteSecret.Request(response.Id));
            //decryptedString = responseDecrypt.Plaintext;
        }
    }
}