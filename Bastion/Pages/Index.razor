@page "/"

@using Microsoft.AspNetCore.Components.Forms
@using Bastion.Core.Domain.UserInput;
@using Bastion.Core.Domain.UserInput.Dto;
@using Bastion.Core.Domain.UserInput.Pipelines;
@using Bastion.Core.Domain.Encryption;
@using Bastion.Core.Domain.Encryption.Pipelines;
@using Bastion.Core.Domain.Decryption;
@using Bastion.Core.Domain.Decryption.Pipelines;

<PageTitle>Bastion</PageTitle>

<h1>Encrypt your secret using AES</h1>

<EditForm Model="@userInputModel" OnSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>
        Secret message: 
        <br/>
        <InputTextArea style="width: 300%" rows="15" id="plaintext" @bind-Value="userInputModel.SecretPlaintext" />

    </label>
    <br/> <br/>
    <label>
        Lifetime (hours):
        <InputNumber id="lifetime" @bind-Value="userInputModel.Lifetime" />
    </label>
    <br/><br/>
    <button type="submit">Encrypt message</button>
</EditForm>

<br/>

<h1>Display encrypted secret and lifetime here</h1>
<div>@encryptedString</div>
<h1>Display decrypted secret here</h1>
<div>@decryptedString</div>

@*<SurveyPrompt Title="How is Blazor working for you?" /> *@

@code {
    private UserInputModel userInputModel = new();
    private string encryptedString = "";
    private string decryptedString = "";

    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleSubmit called");

        var responseInput = await mediator.Send(new CreateUserInput.Request(userInputModel.SecretPlaintext, userInputModel.Lifetime));

        if (responseInput.success)
        {
            Logger.LogInformation("UserInput created");

            // Create UserInputDto
            UserInput userInput = responseInput.userInput;
            UserInputDto userInputDto = new UserInputDto(userInput.Id, userInput.TimeStamp, userInput.SecretPlaintext, userInput.Lifetime);
            // Need key here as well, and IV? Store key and IV in same kv? 
            // Encrypt and store data 
            var response = await mediator.Send(new EncryptAndSaveSecret.Request(userInputDto));

            if (response.ciphertextBytes is not null)
            {
                encryptedString = System.Text.Encoding.Default.GetString(response.ciphertextBytes);
            }
            else
            {
                encryptedString = "Failure";
            }

            // Decrypt data for testing
            var responseDecrypt = await mediator.Send(new DecryptAndDeleteSecret.Request(response.ciphertextBytes, response.key, response.IV));
            decryptedString = responseDecrypt.Plaintext;
        }

        // Process by creating a user object and a dto to send to Encryption domain? 
        // TODO: Have code here or in separate file? 

        // Display the encrypted secret for testing purposes
        // Could we have a user input DTO func? 
        // bool success;
        // How do we utilize the service here? 

        // TODO: Send userinput object to service with a request to payment service
        // TODO: Do a pipeline for userinput object perhaps? 
    }
}