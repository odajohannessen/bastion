@page "/"

@using Microsoft.AspNetCore.Components.Forms
@using Bastion.Core.Domain.UserInputSecret;
@using Bastion.Core.Domain.UserInputSecret.Dto;
@using Bastion.Core.Domain.UserInputSecret.Pipelines;
@using Bastion.Core.Domain.Encryption;
@using Bastion.Core.Domain.Encryption.Pipelines;
@using Bastion.Core.Domain.Decryption;
@using Bastion.Core.Domain.Decryption.Pipelines;
@using Bastion.Models;

<PageTitle>Bastion</PageTitle>

<h1>Encrypt your secret using AES</h1>

<EditForm Model="@userInputModel" OnSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>
        Secret message: 
        <br/>
        <InputTextArea style="width: 300%" rows="15" id="plaintext" @bind-Value="userInputModel.SecretPlaintext" />

    </label>
    <br/> <br/>
    <label>
        Lifetime (hours):
        <InputNumber id="lifetime" @bind-Value="userInputModel.Lifetime" />
        
    </label>
    <br/><br/>
    <button type="submit">Encrypt message</button>
</EditForm>

<br/>

<h1>Copy the URL to share your encrypted secret</h1
@if (id != Guid.Empty)
{
    <div>@url</div>
}

@code {
    private UserInputModel userInputModel = new();
    private Guid id = default;
    private string url = $"https://bastion-bouvet.azurewebsites.net/";
    //private int lifetimeChoices = new int { 1, 4, 24 };

    private async void HandleValidSubmit()
    {
        // Create user input
        var responseInput = await mediator.Send(new CreateUserInput.Request(userInputModel.SecretPlaintext, userInputModel.Lifetime));

        if (responseInput.success)
        {
            // Create UserInputDto
            UserInput userInput = responseInput.userInput;
            id = userInput.Id;
            url = $"https://bastion-bouvet.azurewebsites.net/{id.ToString()}";

            UserInputDto userInputDto = new UserInputDto(userInput.Id, userInput.TimeStamp, userInput.Plaintext, userInput.Lifetime);

            // Encrypt and store data 
            var response = mediator.Send(new EncryptAndSaveSecret.Request(userInputDto));

            // TODO: Sett grense på 24 t: choice: 1 hour, 4 hours, 24 hours?

        }
    }
}