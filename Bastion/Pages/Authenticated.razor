@page "/authenticated"

@using Microsoft.AspNetCore.Components.Forms
@using Bastion.Core.Domain.UserInputSecret;
@using Bastion.Core.Domain.UserInputSecret.Dto;
@using Bastion.Core.Domain.UserInputSecret.Pipelines;
@using Bastion.Core.Domain.Encryption;
@using Bastion.Core.Domain.Encryption.Pipelines;
@using Bastion.Core.Domain.Decryption;
@using Bastion.Core.Domain.Decryption.Pipelines;
@using Bastion.Models;
@using Microsoft.Identity.Web.UI;
@using Microsoft.Identity.Web
@using Microsoft.Graph
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject CopyToClipboardManager ClipBoardManager

<PageTitle>Bastion</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (user == null)
        {
            <div>Loading..</div>
        }
        else
        {
            <div>@user.GivenName has id @user.Id</div>
        }
    </Authorized>
    <NotAuthorized>
        Nothing to see here..
    </NotAuthorized>
</AuthorizeView>

@code {
    private UserInputModel userInputModel = new();
    private Guid id = default;
    private string url = $"https://bastion-bouvet.azurewebsites.net/";
    string message = "";

    private async void HandleValidSubmit()
    {
        message = "Encrypting secret...";
        // Create user input
        var responseInput = await mediator.Send(new CreateUserInput.Request(userInputModel.SecretPlaintext, userInputModel.Lifetime));

        if (responseInput.success)
        {
            // Create UserInputDto
            UserInput userInput = responseInput.userInput;
            id = userInput.Id;
            url = $"https://bastion-bouvet.azurewebsites.net/{id.ToString()}";

            UserInputDto userInputDto = new UserInputDto(userInput.Id, userInput.TimeStamp, userInput.Plaintext, userInput.Lifetime);

            // Encrypt and store data 
            var response = mediator.Send(new EncryptAndSaveSecret.Request(userInputDto));
        }
    }

    // When logging in
    IGraphServiceUsersCollectionPage? users;
    User? user;
    string? oid;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //users = await GraphServiceClient.Users.Request().GetAsync();
            user = await GraphServiceClient.Me.Request().GetAsync();
            oid = user.Id;
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);    
        }
    }

    async Task CopyToClipboard()
    {
        try
        {
            await ClipBoardManager.WriteTextAsync($"{url}");
        }
        catch
        {
            Console.WriteLine("Cannot copy text to clipboard");
        }
    }
}