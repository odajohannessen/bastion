@page "/authenticated"

@using Microsoft.AspNetCore.Components.Forms
@using Bastion.Core.Domain.UserInputSecret;
@using Bastion.Core.Domain.UserInputSecret.Dto;
@using Bastion.Core.Domain.UserInputSecret.Pipelines;
@using Bastion.Core.Domain.Encryption;
@using Bastion.Core.Domain.Encryption.Pipelines;
@using Bastion.Core.Domain.Decryption;
@using Bastion.Core.Domain.Decryption.Pipelines;
@using Bastion.Models;
@using Microsoft.Identity.Web.UI;
@using Microsoft.Identity.Web
@using Microsoft.Graph
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject CopyToClipboardManager ClipBoardManager

<PageTitle>Bastion</PageTitle>

<AuthorizeView>
    <Authorized Context="Auth">
        <h1>Encrypt a secret and share it with a person of your choice</h1>
        @if (user == null || users == null)
        {
            <div>Loading..</div>
        }
        else
        {
            <EditForm Model="@userInputModel" OnSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>
                    <InputTextArea id="plaintext" @bind-Value="userInputModel.SecretPlaintext" />
                </label>
                <br /> <br /> 
                <label>
                    Receiver:
                    <InputSelect class="form-select" @bind-Value="userInputModel.OIDReceiver"> 
                        @foreach (var receiver in users)
                        {
                            <option value="@receiver.Id">@receiver.DisplayName</option>
                        }
                    </InputSelect>
                </label>
                <div>
                    <label>
                        Lifetime: <br />
                        <InputRadioGroup Name="radioGroup" @bind-Value="userInputModel.Lifetime">
                            <InputRadio Value="1" /> 1 hour
                            <InputRadio Value="8" /> 8 hours
                            <InputRadio Value="24" /> 24 hours
                        </InputRadioGroup>

                    </label>
                    <br /><br />
                    <button class="btn btn-primary" type="submit">Encrypt</button>
                </div>
            </EditForm>

            <br/>

            <h1>Share the encrypted secret</h1>
            <div>
                <button class="btn btn-primary" @onclick="CopyToClipboard">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16">
                        <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z" />
                        <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z" />
                    </svg>
                </button>
                One-click link: <br />
            @if (id != Guid.Empty)
            {
                @url
            }
            else 
            {
                @message
            }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        Nothing to see here..
    </NotAuthorized>
</AuthorizeView>

@code {
    private AuthUserInputModel userInputModel = new();
    Guid id = default;
    string url = $"https://bastion-bouvet.azurewebsites.net/";
    string message = "";

    private async void HandleValidSubmit()
    {
        message = "Encrypting secret...";

        if (user == null)
        {
            throw new Exception("user cannot be null.");
        }
        string OIDSender = user.Id;


        // Create user input
        var responseInput = await mediator.Send(new CreateUserInput.Request(userInputModel.SecretPlaintext, userInputModel.Lifetime, OIDSender, userInputModel.OIDReceiver));

        if (responseInput.success)
        {
            // Create UserInputDto
            UserInput userInput = responseInput.userInput;
            id = userInput.Id;
            url = $"https://bastion-bouvet.azurewebsites.net/{id.ToString()}";

            UserInputDto userInputDto = new UserInputDto(userInput.Id, userInput.TimeStamp, userInput.Plaintext, userInput.Lifetime, userInput.OIDSender, userInput.OIDReceiver);

            // Encrypt and store data 
            var response = mediator.Send(new EncryptAndSaveSecret.Request(userInputDto));
        }
    }

    // Get list of all users, and logged in user
    IGraphServiceUsersCollectionPage? users;
    User? user;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await GraphServiceClient.Users.Request().GetAsync();
            user = await GraphServiceClient.Me.Request().GetAsync();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);    
        }
    }

    async Task CopyToClipboard()
    {
        try
        {
            await ClipBoardManager.WriteTextAsync($"{url}");
        }
        catch
        {
            Console.WriteLine("Cannot copy text to clipboard");
        }
    }
}