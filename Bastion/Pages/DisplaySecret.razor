@page "/{Id}"

@using Microsoft.AspNetCore.Components.Forms
@using Bastion.Core.Domain.UserInputSecret;
@using Bastion.Core.Domain.UserInputSecret.Dto;
@using Bastion.Core.Domain.UserInputSecret.Pipelines;
@using Bastion.Core.Domain.Encryption;
@using Bastion.Core.Domain.Encryption.Pipelines;
@using Bastion.Core.Domain.Decryption;
@using Bastion.Core.Domain.Decryption.Pipelines;
@using Bastion.Models;
@using Microsoft.Identity.Web.UI;
@using Microsoft.Identity.Web
@using Microsoft.Graph
@using System.Security.Claims;
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject CopyToClipboardManager ClipBoardManager
@inject NavigationManager NavigationManager

<PageTitle>Bastion</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <h1>Decrypted secret</h1>
        <div class="decrypted">
                    @if (decryptedString == null)
                    {
                        <span>Loading..</span>
                    }
                    else
                    {
                        @decryptedString
                    }
        </div>
        <br />
        <div>
            <Button Icon="fa-regular fa-clipboard" Text="Copy secret message" OnClick="@CopyToClipboard" />
        </div>
        <br />
        @if (!DisplayAlert)
        {
            <div class="alert alert-warning fade-in alerts" role="alert">
                Please login to view secret: <LoginDisplay />
            </div>
        }
    </NotAuthorized>
    <Authorized>
        <h1>Decrypted secret</h1>
        <div class="decrypted">
            @if (decryptedString == null)
            {
                <span>Loading..</span>
            }
            else
            {
                @decryptedString
            }
        </div>
        <br />
        <div>
            <Button Icon="fa-regular fa-clipboard" Text="Copy secret message" OnClick="@CopyToClipboard" />
        </div>
        <br/>
        <div>This secret message was shared with you by: @senderName </div>
    </Authorized>
</AuthorizeView>



@code {
    // Rretrieve web app environment variables/local secrets
    [Inject]
    private IConfiguration Configuration { get; set; }

    // Initialize ID and decrypted message
    [Parameter]
    public string Id { get; set; }

    private string? decryptedString { get; set; }

    // Variables used for authenticated users
    bool authenticated;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    User? userInfo;

    string? OIDSender;
    string? senderName;

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    // Alert boolean
    [Parameter]
    public bool DisplayAlert { get; set; } = true;

    // Run at initialization of page
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;
        authenticated = user.Identity?.IsAuthenticated ?? false;
        
        // If a user is logged in to the web application
        if (authenticated)
        {
            try
            {
                // Validate claims tenant and issuer
                string issuer = "";
                claims = user.Claims;
                foreach (Claim claim in claims)
                {
                    issuer = claim.Issuer;
                    break;
                }
                string? tenantId = user.GetTenantId();

                string TenantId = Configuration["TenantId"];
                string Issuer = Configuration["Issuer"];

                if (tenantId != TenantId || issuer != Issuer)
                {
                    throw new Exception("Invalid tenantId or issuer.");
                }

                // Get info on current logged in user
                userInfo = await GraphServiceClient.Me.Request().GetAsync();
                
                // Send request to decrypt secret
                (decryptedString, OIDSender) = await GetDecryptedSecret(userInfo.Id);
                if (decryptedString == "Invalid GUID")
                {
                    // Redirect if the secret format is incorrect
                    NavigationManager.NavigateTo("/oops");
                }

                if (OIDSender != "" || OIDSender != null)
                {
                    // If there are receivers defined, get list of users in AD tenant
                    var users = await GraphServiceClient.Users.Request().GetAsync();
                    // Search for sender OID
                    foreach (var userProfile in users)
                    {
                        if (userProfile.Id == OIDSender)
                        {
                            senderName = userProfile.DisplayName;
                            break;
                        }
                        else
                        {
                            senderName = "Not found";                          
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                ConsentHandler.HandleException(ex);
            }
        }
        // User is anonymous and has not logged in
        else
        {            
            // Send request to decrypt secret
            (decryptedString, OIDSender) = await GetDecryptedSecret();
            if (decryptedString == "Invalid GUID")
            {
                // Redirect if the secret format is incorrect
                NavigationManager.NavigateTo("/oops");
            }
            // User is alerted to login because secret has predefined receivers
            else if (decryptedString == "Login required")
            {
                decryptedString = "Nothing to see here...";
                DisplayAlert = false; // Change bool to false to display message
                StateHasChanged(); // Update state
            }
        }

    }

    // Helper method for sending request to decrypt and delete secret
    public async Task<(string, string)> GetDecryptedSecret(string OIDUser="")
    {
        // Decrypt secret
        var responseDecrypt = await mediator.Send(new DecryptAndDeleteSecret.Request(Id, OIDUser));
        return (responseDecrypt.Plaintext, responseDecrypt.OIDSender);
    }

    // Copy to clipboard method
    async Task CopyToClipboard()
    {
        try
        {
            await ClipBoardManager.WriteTextAsync($"{decryptedString}");
        }
        catch
        {
            System.Console.WriteLine("Cannot write text to clipboard");
        }
    }
}